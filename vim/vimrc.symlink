""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 基本配置
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"{{{

" 讲空格设置为默认的前缀键
let mapleader="\<space>"
" 快速编辑和加载vimrc配置
nnoremap <leader>ve :vsp $MYVIMRC<CR>
nnoremap <leader>vs :source $MYVIMRC<CR>

" close compatible mode which is for vi.
set nocompatible

" set syntax highlight on
syntax on

" absolute & relative line number
set number " display line number
set relativenumber " display relative line number

" set tab & space 2
set tabstop=2 " Show existing tab with 4 spaces width
set shiftwidth=2 " When indenting with '>', use 4 spaces width
set expandtab " On pressing tab, insert 4 spaces.

" more powerful backspace
set backspace=2
set smarttab

" indent settings
set autoindent
set smartindent
set cindent
set cinoptions=g1,h1,i4,l1,m1,N-s,t0,W4,+2s,:2,(0

" support gnu syntaxt
let c_gnu = 1

" show error for mixed tab-space
let c_space_errors = 1

" don't show gcc statement expression ({x, y;}) as error
let c_no_curly_error = 1

" use shallow color mark current line and column.
autocmd InsertLeave * set nocul nocuc
autocmd InsertEnter * set cul cuc

" 在第81列标记一个竖列，代码超过此列，竖屏双列展示不太友好。
set colorcolumn=81

" 光标遇到圆括号、方括号、大括号时，自动高亮对应的另一个圆括号、方括号和大括号。
set showmatch

" enable mouse to locate and move in vim windows
set mouse=a

" 在底部显示，当前处于命令模式还是插入模式。
set showmode

" list chars
" set listchars+=eol:$,tab:>-,trail:~,extends:>,precedes:<,space:·
" set list
" Encodings
" Vim will try these encodings when open a file
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936,big5,euc-jp,euc-kr,latin1
" Defines how your keyboard encodes what you type
set termencoding=utf-8
" Sets how vim shall represent characters internally
set encoding=utf-8

set history=2000

" vim vimdows
set splitbelow
set splitright

" 按照显示行移动
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j
map gn :bn<cr>
map gp :bp<cr>

" :h window-resize
nmap = :resize +5<CR>
nmap - :resize -5<CR>
nmap > :vertical res +5<CR>
nmap < :vertical res -5<CR>

" remap copy file to system clipboard
nmap <F3> gg"+yG``

" 开启文件类型检查，并且载入与该类型对应的缩进规则。比如，如果编辑的是.py文件
" Vim 就是会找 Python 的缩进规则~/.vim/indent/python.vim。
filetype plugin indent on

" 按照缩进进行折叠
" zo打开当前折叠, zc折叠.
" za切换折叠状态, zR和zM分别用于同时打开和关闭所有折叠.
set foldmethod=indent
" 为了方便看清折叠的位置，从屏幕左边开始的第2列来标记折叠
" 其中符号-表示一个打开的折叠，符号|表示打开的折叠的内容，符号+表示关闭的折叠。
" set foldcolumn=1
" vim 默认会折叠所有，设置vim打开新文件时默认打开折叠。
autocmd BufRead * normal zR
" 部分文件使用marker折叠，方便快速定位
autocmd FileType vim set foldmethod=marker
autocmd FileType proto set foldmethod=marker
" za打开或折叠, zR打开所有，zM折叠所有, zc折叠当前，zo打开当前

" FINDING FILES
" search into subfiles
" Provides tab-completion for all file-related tasks
set path+=./**,~/.dotfiles/**
cabbrev vf vert sfind
cabbrev tf tabfind
" Display all matching files when we tab complete
set wildmenu
" now we can hit tab to :find by partial match &
" use * to make it fuzzy

" }}}

cnoremap <expr> %% getcmdtype( ) == ':' ? expand('%:h').'/' : '%%'
noremap <Leader>n nzz
noremap <Leader>N Nzz

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 用vim-plug管理常用插件
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" auto-completion, auto-jump
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'pappasam/coc-jedi', {'do': 'yarn install --frozen-lockfile && yarn build'}
"" coc.nvim configuration
" {{{
let g:coc_disable_startup_warning = 1
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=200

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? "\<C-n>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)


" GoTo code navigation.
" nmap <silent> <C-]> <Plug>(coc-definition)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
" Note coc#float#scroll works on neovim >= 0.4.0 or vim >= 8.2.0750
nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"

" NeoVim-only mapping for visual mode scroll
" Useful on signatureHelp after jump placeholder of snippet expansion
if has('nvim')
  vnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#nvim_scroll(1, 1) : "\<C-f>"
  vnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#nvim_scroll(0, 1) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

autocmd FileType python let b:coc_root_patterns = ['setup.py']
" }}}
" coc-snippets configuration
" {{{
" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)
" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)
" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'
" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'
" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)
" Use <leader>x for convert visual selected code to snippet
xmap <leader>x  <Plug>(coc-convert-snippet)
" }}}

" Insert or delete brackets, parens, quotes in pair.
Plug 'jiangmiao/auto-pairs'

" airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
"" vim-airline configuration
" {{{
" let g:airline_theme='monokai_tasty'
let g:airline_theme='molokai'
let g:airline_powerline_fonts=1
let g:Powerline_symbols='unicode'
" Automatically displays all buffers when there's only one tab open.
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

" }}}

Plug 'vim-scripts/DoxygenToolkit.vim'

Plug 'patstockwell/vim-monokai-tasty'

" Plug 'simeji/winresizer'
" " {{{
" " If you want to start window resize mode by `Ctrl+H`
" let g:winresizer_start_key = '<C-M>'
" " If you cancel and quit window resize mode by `z` (keycode 122)
" let g:winresizer_keycode_cancel = 122
" let g:winresizer_vert_resize = 3
" let g:winresizer_horiz_resize = 3
" " }}}
" Show diff between current and git repo.
Plug 'airblade/vim-gitgutter'

Plug 'honza/vim-snippets'

" Plug 'yggdroot/indentLine'
" " {{{
" let g:indent_guides_guide_size            = 1  " 指定对齐线的尺寸
" let g:indent_guides_start_level           = 2  " 从第二层开始可视化显示缩进
" let g:indentLine_char_list = ['|', '¦', '┆', '┊']
" " }}}

Plug 'luochen1990/rainbow'
" {{{
let g:rainbow_active = 1
" }}}

Plug 'liuchengxu/vista.vim'
" {{{
" How each level is indented and what to prepend.
" This could make the display more compact or more spacious.
" e.g., more compact: ["▸ ", ""]
" Note: this option only works for the kind renderer, not the tree renderer.
let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]

" Executive used when opening vista sidebar without specifying it.
" See all the avaliable executives via `:echo g:vista#executives`.
let g:vista_default_executive = 'coc'

" Set the executive for some filetypes explicitly. Use the explicit executive
" instead of the default one for these filetypes when using `:Vista` without
" specifying the executive.
let g:vista_executive_for = {
  \ 'cpp': 'coc',
  \ 'php': 'vim_lsp',
  \ }

" Declare the command including the executable and options used to generate ctags output
" for some certain filetypes.The file path will be appened to your custom command.
" For example:
let g:vista_ctags_cmd = {
      \ 'haskell': 'hasktags -x -o - -c',
      \ }

" To enable fzf's preview window set g:vista_fzf_preview.
" The elements of g:vista_fzf_preview will be passed as arguments to fzf#vim#with_preview()
" For example:
let g:vista_fzf_preview = ['right:50%']
" " Ensure you have installed some decent font to show these pretty symbols, then you can enable icon for the kind.
" let g:vista#renderer#enable_icon = 1
"
" " The default icons can't be suitable for all the filetypes, you can extend it as you wish.
" let g:vista#renderer#icons = {
" \   "function": "\uf794",
" \   "variable": "\uf71b",
" \  }
nmap <F2> :Vista!!<CR>
let g:vista_sidebar_position = 'vertical topleft'
" }}}

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' },
Plug 'junegunn/fzf.vim',
" {{{

" }}}

" Plug 'roxma/vim-tmux-clipboard'
" 将复制的内容也加到系统粘贴板上。
" set clipboard+=unnamedplus
" 使用tc将选中的内容复制到tmux的buffer里
vnoremap <leader>tc y<cr>:call system("tmux load-buffer -", @0)<cr>gv

call plug#end()


" vim-monokai-tasty
colorscheme vim-monokai-tasty

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 其他小工具
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 在.cpp/.cc打开对应的.h或者反过来；用,e在当前窗口打开；,v在右边新开一个窗口打开
" {{{
function! SwitchSourceHeader()
  "update!
  let ext = expand ("%:e")
  if ext == "cpp" || ext == "cc"
    edit %:.:r.h
  elseif filereadable(expand("%:.:r") . ".cpp")
    edit %:.:r.cpp
  else
    edit %:.:r.cc
  endif
endfunction

function! SwitchSourceHeaderVS()
  "update!
  let ext = expand("%:e")
  if (ext == "cpp" || ext == "cc")
    " vs %:p:r.h
    vs %:.:r.h
  elseif filereadable(expand("%:.:r") . ".cpp")
    " vs %:p:r.cpp
    vs %:.:r.cpp
  else
    " vs %:p:r.cc
    vs %:.:r.cc
  endif
endfunction

nmap ,e :call SwitchSourceHeader()<CR>

nmap ,v :call SwitchSourceHeaderVS()<CR>
" }}}

" 缩进格式修正：模板参数表，类初始化列表等
" {{{
function! FixCppIndent()
    let l:cline_num = line('.')
    let l:cline = getline(l:cline_num)
    let l:pline_num = prevnonblank(l:cline_num - 1)
    let l:pline = getline(l:pline_num)
    while l:pline =~# '\(^\s*{\s*\|^\s*//\|^\s*/\*\|\*/\s*$\)'
        let l:pline_num = prevnonblank(l:pline_num - 1)
        let l:pline = getline(l:pline_num)
    endwhile
    let l:retv = cindent('.')
    let l:pindent = indent(l:pline_num)
    if l:pline =~# '^\s*template\s*<\s*$'
        let l:retv = l:pindent + &shiftwidth
    elseif l:pline =~# '^\s*template\s*<.*>\s*$'
        let l:retv = l:pindent
    elseif l:pline =~# '\s*typename\s*.*,\s*$'
        let l:retv = l:pindent
    elseif l:pline =~# '\s*typename\s*.*>\s*$'
        let l:etv = l:pindent - &shiftwidth
    elseif l:cline =~# '^\s*>\s*$'
        let l:retv = l:pindent - &shiftwidth
    elseif l:pline =~# '^\s\+: \S.*' " C++ initialize list
        let l:retv = l:pindent + 2
    elseif l:cline =~# '^\s*:\s*\w\+(' " C++ initialize list
        let l:retv = l:pindent + 4
    else
        echo "No match"
    endif
    return l:retv
endfunction
autocmd FileType cpp nested setlocal indentexpr=FixCppIndent()
" }}}

" 保存时自动删除行尾多余的空白字符
" {{{
function! RemoveTrailingSpace()
    if $VIM_HATE_SPACE_ERRORS != '0'
        normal m`
        silent! :%s/\s\+$//e
        normal ``
    endif
endfunction
autocmd BufWritePre * nested call RemoveTrailingSpace()

" 修复不一致的换行符，统一采用 Unix 换行符(\n)
function! FixInconsistFileFormat()
    if &fileformat == 'unix'
        silent! :%s/\r$//e
    endif
endfunction
autocmd BufWritePre * nested call FixInconsistFileFormat()
" }}}

" 增加'CppLint'自定义命令，在冒号模式下输入:CppLint即可检查当前文件，
" 也支持带文件名参数。检查结果支持 vim 的  QuickFix 模式
" 在不离开 vim 的情况下跳转到出错行方便，修正。
" {{{
function! CppLint(...)
    let l:args = join(a:000)
    if l:args == ""
        let l:args = expand("%")
        if l:args == ""
            let l:args = '*'
        endif
    endif
    let l:old_makeprg = &makeprg
    setlocal makeprg=cpplint.py
    execute "make " . l:args
    let &makeprg=old_makeprg
endfunction
command! -complete=file -nargs=* CppLint call CppLint('<args>')

if has('python')
  map <c-n> :pyf $HOME/bin/clang-format.py<cr>
  imap <c-n> <c-o>:pyf $HOME/bin/clang-format.py<cr>
elseif has('python3')
  map <c-n> :py3f $HOME/bin/clang-format.py<cr>
  imap <c-n> <c-o>:py3f $HOME/bin/clang-format.py<cr>
endif
" }}}

""" vim-snippets and ultisnips
"" Trigger configuration. You need to change this to something other than <tab> if you use one of the following:
"" - https://github.com/Valloric/YouCompleteMe
"" - https://github.com/nvim-lua/completion-nvim
"let g:UltiSnipsExpandTrigger="<c-j>"
"let g:UltiSnipsJumpForwardTrigger="<c-k>"
"let g:UltiSnipsJumpBackwardTrigger="<c-l>"
"
"" If you want :UltiSnipsEdit to split your window.
"let g:UltiSnipsEditSplit="vertical"
"

" 为 vim 开启 true color (24 位颜色) 支持
" {{{
" https://lotabout.me/2018/true-color-for-tmux-and-vim/
" if has("termguicolors")
"   " fix bug for vim
"   set t_8f=[38;2;%lu;%lu;%lum
"   set t_8b=[48;2;%lu;%lu;%lum
"   " enable true color
"   set termguicolors
" endif
" }}}
